# UART configuration for HLK-LD2402
uart:
  id: uart_bus
  tx_pin: GPIO1  # TX0 hardware UART
  rx_pin: GPIO3  # RX0 hardware UART
  baud_rate: 115200
  data_bits: 8
  parity: NONE
  stop_bits: 1

# HLK-LD2402 radar component
external_components:
  - source:
      type: git
      url: https://github.com/mouldybread/hlk_ld2402_esphome
    refresh: 0ms

hlk_ld2402:
  uart_id: uart_bus
  id: radar_sensor
  max_distance: 5.0
  timeout: 5

# Binary sensors
binary_sensor:
  - platform: hlk_ld2402
    id: radar_presence
    name: "Presence"
    device_class: presence
    hlk_ld2402_id: radar_sensor

  - platform: hlk_ld2402
    id: radar_micromovement
    name: "Micromovement"
    device_class: motion
    hlk_ld2402_id: radar_sensor
  
  - platform: hlk_ld2402
    id: radar_power_interference
    name: "Radar Power Interference"
    device_class: problem
    power_interference: true
    hlk_ld2402_id: radar_sensor

# Distance sensor - Use component's built-in throttling instead of filter
sensor:
  - platform: hlk_ld2402
    id: radar_distance
    name: "Distance"
    hlk_ld2402_id: radar_sensor
    device_class: distance
    unit_of_measurement: "cm"
    accuracy_decimals: 1
    throttle: 2000ms  # 2 second throttle directly in the component
    
  # Calibration progress sensor
  - platform: hlk_ld2402
    id: radar_calibration_progress
    name: "Radar Calibration Progress"
    hlk_ld2402_id: radar_sensor
    unit_of_measurement: "%"
    icon: "mdi:progress-wrench"
    entity_category: diagnostic
    state_class: measurement
    calibration_progress: true

  # Use a template to generate 14 energy gate sensors (0-13)
  # Each gate corresponds to approximately 0.7m of distance
  # First 14 gates cover up to ~9.8m

  # Add more gates as needed, or use a template to generate them
  # For example, gates 0-4 cover the first 3.5 meters (gate size is ~0.7m)
  - platform: hlk_ld2402
    id: radar_energy_gate_0
    name: "Radar Energy Gate 0-0.7m"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 0
      
  - platform: hlk_ld2402
    id: radar_energy_gate_1
    name: "Radar Energy Gate 0.7-1.4m"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 1
      
  - platform: hlk_ld2402
    id: radar_energy_gate_2
    name: "Radar Energy Gate 1.4-2.1m"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 2
      
  - platform: hlk_ld2402
    id: radar_energy_gate_3
    name: "Radar Energy Gate 2.1-2.8m"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 3
      
  - platform: hlk_ld2402
    id: radar_energy_gate_4
    name: "Radar Energy Gate 2.8-3.5m"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 4

  # Continue the pattern for additional gates as needed up to gate 13 (9.1-9.8m)
  # For a cleaner dashboard, you might want to only define the gates
  # relevant to your specific installation, typically gates 0-5 for indoor use
      
  - platform: hlk_ld2402
    id: radar_energy_gate_12
    name: "Radar Energy Gate 12"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 12
      
  - platform: hlk_ld2402
    id: radar_energy_gate_13
    name: "Radar Energy Gate 13"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:antenna"
    entity_category: diagnostic
    energy_gate:
      gate_index: 13

  # NEW: Motion threshold sensors for gates 0 and 1
  - platform: hlk_ld2402
    id: radar_motion_threshold_0
    name: "Gate 0 Motion Threshold"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:gauge"
    entity_category: diagnostic
    motion_threshold:
      gate_index: 0
      
  - platform: hlk_ld2402
    id: radar_motion_threshold_1
    name: "Gate 1 Motion Threshold"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:gauge"
    entity_category: diagnostic
    motion_threshold:
      gate_index: 1
  
  # NEW: Micromotion threshold sensors for gates 0 and 1
  - platform: hlk_ld2402
    id: radar_micromotion_threshold_0
    name: "Gate 0 Micromotion Threshold"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:gauge"
    entity_category: diagnostic
    micromotion_threshold:
      gate_index: 0
      
  - platform: hlk_ld2402
    id: radar_micromotion_threshold_1
    name: "Gate 1 Micromotion Threshold"
    hlk_ld2402_id: radar_sensor
    state_class: measurement
    unit_of_measurement: "dB"
    icon: "mdi:gauge"
    entity_category: diagnostic
    micromotion_threshold:
      gate_index: 1

# Text sensors
text_sensor:
  - platform: hlk_ld2402
    id: radar_firmware_version
    name: "Radar Firmware Version"
    entity_category: diagnostic
    hlk_ld2402_id: radar_sensor
    firmware_version: true

  - platform: hlk_ld2402
    id: radar_operating_mode
    name: "Radar Operating Mode"
    entity_category: diagnostic
    hlk_ld2402_id: radar_sensor
    operating_mode: true

# Control buttons - using template buttons 
button:
  - platform: template
    name: "Calibrate"
    on_press:
      - lambda: id(radar_sensor).calibrate();

  - platform: template
    name: "Auto Gain"
    on_press:
      - lambda: id(radar_sensor).enable_auto_gain();

  - platform: template
    name: "Save Config"
    on_press:
      - lambda: id(radar_sensor).save_config();

  - platform: template
    name: "Engineering Mode Toggle"
    icon: "mdi:tune"
    on_press:
      - lambda: id(radar_sensor).set_engineering_mode();
      
  # Factory reset button with warning icon
  - platform: template
    name: "Factory Reset"
    icon: "mdi:factory-reset"
    on_press:
      # Add a warning log message before reset
      - logger.log: "WARNING: Performing factory reset on radar module"
      - lambda: id(radar_sensor).factory_reset();

  - platform: template
    name: "Apply Calibration Coefficients"
    icon: "mdi:tune-vertical-variant"
    on_press:
      - lambda: |-
          id(radar_sensor).calibrate_with_coefficients(
            id(trigger_coefficient).state,
            id(hold_coefficient).state,
            id(micromotion_coefficient).state
          );

  # NEW: Buttons to read threshold values
  - platform: template
    name: "Read Motion Thresholds"
    icon: "mdi:refresh"
    entity_category: diagnostic
    on_press:
      - lambda: id(radar_sensor).read_motion_thresholds();
      
  - platform: template
    name: "Read Micromotion Thresholds"
    icon: "mdi:refresh"
    entity_category: diagnostic
    on_press:
      - lambda: id(radar_sensor).read_micromotion_thresholds();

# Add sliders for calibration coefficients and gate thresholds - all sliders must be in number section
number:
  - platform: template
    name: "Trigger Coefficient"
    id: trigger_coefficient
    optimistic: true
    min_value: 1.0
    max_value: 20.0
    step: 0.1
    initial_value: 3.5
    icon: "mdi:tune-vertical"
    unit_of_measurement: "x"
    
  - platform: template
    name: "Hold Coefficient"
    id: hold_coefficient
    optimistic: true
    min_value: 1.0
    max_value: 20.0
    step: 0.1
    initial_value: 3.0
    icon: "mdi:tune-vertical"
    unit_of_measurement: "x"
    
  - platform: template
    name: "Micromotion Coefficient"
    id: micromotion_coefficient
    optimistic: true
    min_value: 1.0
    max_value: 20.0
    step: 0.1
    initial_value: 4.0
    icon: "mdi:tune-vertical"
    unit_of_measurement: "x"

  # Motion threshold sliders for gates
  - platform: template
    name: "Gate 0 Motion Threshold"
    id: gate_0_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(0, id(gate_0_motion_threshold).state);
  
  - platform: template
    name: "Gate 1 Motion Threshold"
    id: gate_1_motion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 45.0
    icon: "mdi:radar"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_motion_threshold(1, id(gate_1_motion_threshold).state);
  
  # Micromotion threshold sliders for gates
  - platform: template
    name: "Gate 0 Micromotion Threshold"
    id: gate_0_micromotion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_micromotion_threshold(0, id(gate_0_micromotion_threshold).state);
  
  - platform: template
    name: "Gate 1 Micromotion Threshold"
    id: gate_1_micromotion_threshold
    optimistic: true
    min_value: 0.0
    max_value: 95.0
    step: 1.0
    initial_value: 40.0
    icon: "mdi:hand-wave"
    unit_of_measurement: "dB"
    on_value:
      - lambda: |-
          id(radar_sensor).set_gate_micromotion_threshold(1, id(gate_1_micromotion_threshold).state);

# Add status LED if available
status_led:
  pin: GPIO2
